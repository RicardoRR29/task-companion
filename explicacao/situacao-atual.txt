Funcionalidades atuais
Gerenciamento de fluxos

Criar, clonar, atualizar e excluir fluxos (useFlows.ts).

Passos de tipos TEXT, QUESTION, MEDIA e CUSTOM (src/types/flow.ts).

Arrastar e soltar para reordenar passos (FlowEditor e StepsSidebar).

Importar e exportar fluxos em JSON (FlowImportExport.tsx).

Execução de fluxos (FlowPlayer)

Player com navegação passo a passo, histórico e progresso (usePlayer.ts e FlowPlayer).

Tela de conclusão informando total de passos e tempo gasto (CompletionScreen.tsx).

Analytics

Cálculo de visitas, conclusões, taxa de conclusão e tempo médio/total por passo (useAnalytics.ts).

Relatórios e gráficos com Recharts (tempo total, timeline, área empilhada, heatmaps, network graph) (src/pages/Analytics/*).

Configurações do número de execuções exibidas (useAnalyticsConfig.ts).

Banco de dados local

Dexie para armazenar fluxos, sessões, eventos de passo, logs e componentes personalizados (src/db/index.ts).

Funções de auditoria: registro de ações e consulta de logs (utils/audit.ts e AuditTrail.tsx).

Componentes personalizados

Cadastro e edição de componentes HTML/CSS/JS reutilizáveis (CustomComponents.tsx e useCustomComponents.ts).

Renderização segura de componentes (CustomRenderer.tsx).

Configurações e personalização

Ajustes de logo e cores primária/secundária da empresa (Company.tsx, useCompanySettings.ts, utils/theme.ts).

Configurações de visualização do dashboard gravadas em localStorage (modo grid/lista, colunas exibidas) (Dashboard.tsx).

Integração com IA

Modal para gerar fluxos a partir de texto via OpenAI (AIFlowModal.tsx).

PWA e infraestrutura

Service worker (via vite-plugin-pwa) e registro automático (main.tsx).

Hooks utilitários (toast, detecção de mobile, etc.).

Outras páginas

Página de auditoria, importação/exportação, componentes personalizados e área em construção para “Path Analytics”.

Sugestões de melhorias e próximas implementações
Concluir funcionalidades pendentes

Implementar de fato a página “Path Analytics” (PathAnalytics.tsx), detalhando caminhos mais comuns e taxas de abandono.

Aprimorar a edição de passos

Unificar os formulários duplicados (há um StepForm em src/components/flow e outro em FlowEditor/StepForm).

Incluir suporte a arrastar e soltar dentro do player para saltar passos, caso aplicável.

Refinar segurança

Sanitizar com bibliotecas de confiança (ex. DOMPurify) o HTML dos componentes personalizados.


Experiência de usuário

Adicionar tour ou tutorial guiado para novos usuários.

Permitir edição inline do título do fluxo diretamente nos cartões do dashboard.

Sincronização e colaboração

Possibilitar sincronização/backup em nuvem (pouchdb + replicação) ou integração com contas de usuário.

Implementar controle de acesso/permite convidar colaboradores para editar ou visualizar fluxos.

Integração com APIs externas


Expandir o uso da API do OpenAI para sugerir melhorias em fluxos existentes.

Testes e qualidade

Criar testes automatizados (unitários e e2e) para Player e Editor (há dependência do Playwright e Vitest no projeto).

Configurar lint mais abrangente (por exemplo, regras de estilos ou de acessibilidade).

Performance e armazenamento

Avaliar limites de tamanho do banco Dexie e política de limpeza (exclusão de sessões antigas, logs, etc.).

Implementar lazy loading de gráficos pesados ou dados analíticos.

Acessibilidade e internacionalização

Garantir que os componentes atendam boas práticas de acessibilidade (atalhos de teclado, ARIA).

Suporte a múltiplos idiomas (i18n) para atingir mais usuários.

Melhorias visuais

Opções de temas (modo escuro/claro integrados às configurações de marca).

Dashboard com estatísticas em tempo real (ex.: número de execuções ativas).

Essa análise considera os arquivos e funcionalidades presentes na base de código atual. Implementar gradativamente essas melhorias pode elevar a experiência e a robustez da aplicação.


