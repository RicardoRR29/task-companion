________________
...components.json
_______________
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks",
    "@/": "./src"
  },
  "iconLibrary": "lucide"
}


________________
...eslint.config.js
_______________
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])


________________
....gitignore
_______________
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


________________
...index.html
_______________
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


________________
...package.json
_______________
{
  "name": "taco",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/modifiers": "^9.0.0",
    "@dnd-kit/sortable": "^10.0.0",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dexie": "^4.0.11",
    "lucide-react": "^0.525.0",
    "pouchdb-browser": "^9.0.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.3",
    "recharts": "^3.0.2",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "undefined": "^0.1.0",
    "vite-plugin-pwa": "^1.0.1",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@eslint/js": "^9.29.0",
    "@testing-library/react": "^16.3.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.5.2",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.29.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.2.0",
    "playwright": "^1.53.2",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.34.1",
    "vite": "^7.0.0",
    "vitest": "^3.2.4"
  }
}


________________
...postcss.config.cjs
_______________
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};


________________
...README.md
_______________
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```


________________
...src/components/flow/StepForm.tsx
_______________
"use client";

import { useState, useCallback, useEffect } from "react";
import { DndContext, closestCenter, type DragEndEvent } from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  verticalListSortingStrategy,
  useSortable,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import {
  GripVertical,
  Plus,
  Trash2,
  Eye,
  EyeOff,
  Save,
  AlertCircle,
  Type,
  HelpCircle,
  ImageIcon,
} from "lucide-react";
import { nanoid } from "nanoid";

import type { Step, StepOption } from "../../types/flow";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Label } from "../ui/label";
import { Textarea } from "../ui/textarea";
import { Card, CardContent } from "../ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { Badge } from "../ui/badge";
import { Alert, AlertDescription } from "../ui/alert";
import { cn } from "../../lib/utils";

interface Props {
  step: Step;
  onChange: (step: Step) => void;
}

const STEP_TYPES = [
  {
    value: "TEXT",
    label: "Texto",
    description: "Exibe conteúdo textual",
    icon: Type,
    color: "bg-blue-50 text-blue-700 border-blue-200",
  },
  {
    value: "QUESTION",
    label: "Pergunta",
    description: "Pergunta com opções",
    icon: HelpCircle,
    color: "bg-green-50 text-green-700 border-green-200",
  },
  {
    value: "MEDIA",
    label: "Mídia",
    description: "Imagens e vídeos",
    icon: ImageIcon,
    color: "bg-purple-50 text-purple-700 border-purple-200",
    disabled: true,
  },
] as const;

export default function StepForm({ step, onChange }: Props) {
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);

  // Auto-save indication
  useEffect(() => {
    const timer = setTimeout(() => {
      setHasUnsavedChanges(false);
    }, 1000);
    return () => clearTimeout(timer);
  }, [step]);

  const validateStep = useCallback((currentStep: Step): string[] => {
    const errors: string[] = [];

    if (!currentStep.title.trim()) {
      errors.push("Título é obrigatório");
    }

    if (!currentStep.content.trim()) {
      errors.push("Conteúdo é obrigatório");
    }

    if (currentStep.type === "QUESTION") {
      if (!currentStep.options || currentStep.options.length === 0) {
        errors.push("Perguntas devem ter pelo menos uma opção");
      } else {
        currentStep.options.forEach((option, index) => {
          if (!option.label.trim()) {
            errors.push(`Opção ${index + 1} deve ter um rótulo`);
          }
        });
      }
    }

    return errors;
  }, []);

  const setField = useCallback(
    <K extends keyof Step>(key: K, value: Step[K]) => {
      const updatedStep = { ...step, [key]: value };
      onChange(updatedStep);
      setHasUnsavedChanges(true);
      setValidationErrors(validateStep(updatedStep));
    },
    [step, onChange, validateStep]
  );

  const addOption = useCallback(() => {
    const opts = step.options ?? [];
    const newOpt: StepOption = {
      id: nanoid(),
      label: "Nova opção",
      targetStepId: "",
    };
    setField("options", [...opts, newOpt]);
  }, [step.options, setField]);

  const updateOption = useCallback(
    (id: string, key: keyof StepOption, value: string) => {
      if (!step.options) return;
      const opts = step.options.map((o) =>
        o.id === id ? { ...o, [key]: value } : o
      );
      setField("options", opts);
    },
    [step.options, setField]
  );

  const removeOption = useCallback(
    (id: string) => {
      if (!step.options) return;
      const opts = step.options.filter((o) => o.id !== id);
      setField("options", opts);
    },
    [step.options, setField]
  );

  const handleDragEnd = useCallback(
    (event: DragEndEvent) => {
      if (!step.options) return;

      const { active, over } = event;
      if (!over || active.id === over.id) return;

      const oldIndex = step.options.findIndex((o) => o.id === active.id);
      const newIndex = step.options.findIndex((o) => o.id === over.id);

      if (oldIndex === -1 || newIndex === -1) return;

      const newOptions = arrayMove(step.options, oldIndex, newIndex);
      setField("options", newOptions);
    },
    [step.options, setField]
  );

  const currentStepType = STEP_TYPES.find((type) => type.value === step.type);

  if (isPreviewMode) {
    return (
      <StepPreview step={step} onExitPreview={() => setIsPreviewMode(false)} />
    );
  }

  return (
    <div className="h-full flex flex-col max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center gap-3">
          {currentStepType?.icon && (
            <currentStepType.icon className="h-5 w-5 text-muted-foreground" />
          )}
          <h1 className="text-xl font-semibold">Editar Passo</h1>
          {currentStepType && (
            <Badge
              variant="secondary"
              className={cn("text-xs", currentStepType.color)}
            >
              {currentStepType.label}
            </Badge>
          )}
        </div>

        <div className="flex items-center gap-3">
          {hasUnsavedChanges && (
            <div className="flex items-center gap-1.5 text-sm text-muted-foreground">
              <Save className="h-3 w-3" />
              Salvando...
            </div>
          )}
          <Button
            variant="outline"
            size="sm"
            onClick={() => setIsPreviewMode(true)}
          >
            <Eye className="mr-2 h-4 w-4" />
            Visualizar
          </Button>
        </div>
      </div>

      {/* Validation Errors */}
      {validationErrors.length > 0 && (
        <Alert className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            <ul className="list-disc list-inside space-y-1">
              {validationErrors.map((error, index) => (
                <li key={index}>{error}</li>
              ))}
            </ul>
          </AlertDescription>
        </Alert>
      )}

      {/* Content */}
      <div className="flex-1 overflow-y-auto space-y-8">
        {/* Basic Fields */}
        <div className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 space-y-2">
              <Label htmlFor="step-title" className="text-sm font-medium">
                Título do Passo
              </Label>
              <Input
                id="step-title"
                value={step.title}
                onChange={(e) => setField("title", e.target.value)}
                placeholder="Digite o título do passo..."
                className={cn(
                  "text-base",
                  validationErrors.some((e) => e.includes("Título")) &&
                    "border-destructive focus-visible:ring-destructive"
                )}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="step-type" className="text-sm font-medium">
                Tipo
              </Label>
              <Select
                value={step.type}
                onValueChange={(value) =>
                  setField("type", value as Step["type"])
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {STEP_TYPES.map((type) => (
                    <SelectItem
                      key={type.value}
                      value={type.value}
                      disabled={type.disabled}
                    >
                      <div className="flex items-center gap-2">
                        <type.icon className="h-4 w-4" />
                        <div>
                          <div className="font-medium">{type.label}</div>
                          <div className="text-xs text-muted-foreground">
                            {type.description}
                          </div>
                        </div>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="step-content" className="text-sm font-medium">
              Conteúdo
            </Label>
            <Textarea
              id="step-content"
              value={step.content}
              onChange={(e) => setField("content", e.target.value)}
              placeholder="Digite o conteúdo do passo..."
              rows={6}
              className={cn(
                "resize-none text-base",
                validationErrors.some((e) => e.includes("Conteúdo")) &&
                  "border-destructive focus-visible:ring-destructive"
              )}
            />
            <p className="text-xs text-muted-foreground">
              {step.content.length} caracteres • Suporte a Markdown
            </p>
          </div>
        </div>

        {/* Question Options */}
        {step.type === "QUESTION" && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-medium">Opções de Resposta</h3>
                <p className="text-sm text-muted-foreground">
                  Configure as opções disponíveis para esta pergunta
                </p>
              </div>
              <Button size="sm" onClick={addOption}>
                <Plus className="mr-2 h-4 w-4" />
                Adicionar
              </Button>
            </div>

            {!step.options || step.options.length === 0 ? (
              <Card>
                <CardContent className="flex flex-col items-center justify-center py-12">
                  <HelpCircle className="h-12 w-12 text-muted-foreground mb-4" />
                  <h4 className="font-medium mb-2">Nenhuma opção criada</h4>
                  <p className="text-sm text-muted-foreground text-center mb-4 max-w-sm">
                    Adicione pelo menos uma opção de resposta para esta pergunta
                  </p>
                  <Button variant="outline" onClick={addOption}>
                    <Plus className="mr-2 h-4 w-4" />
                    Criar primeira opção
                  </Button>
                </CardContent>
              </Card>
            ) : (
              <DndContext
                collisionDetection={closestCenter}
                onDragEnd={handleDragEnd}
              >
                <SortableContext
                  items={step.options.map((o) => o.id)}
                  strategy={verticalListSortingStrategy}
                >
                  <div className="space-y-3">
                    {step.options.map((option, index) => (
                      <OptionItem
                        key={option.id}
                        option={option}
                        index={index}
                        onUpdate={(key, value) =>
                          updateOption(option.id, key, value)
                        }
                        onRemove={() => removeOption(option.id)}
                      />
                    ))}
                  </div>
                </SortableContext>
              </DndContext>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

interface OptionItemProps {
  option: StepOption;
  index: number;
  onUpdate: (key: keyof StepOption, value: string) => void;
  onRemove: () => void;
}

function OptionItem({ option, index, onUpdate, onRemove }: OptionItemProps) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({
    id: option.id,
  });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : undefined,
  };

  return (
    <div
      ref={setNodeRef}
      style={style}
      className={cn(
        "group flex items-center gap-3 p-4 bg-white border border-gray-200 rounded-lg transition-all",
        "hover:border-gray-300 hover:shadow-sm",
        isDragging && "shadow-lg border-gray-300"
      )}
    >
      <div
        className="cursor-grab active:cursor-grabbing text-muted-foreground hover:text-foreground transition-colors"
        {...attributes}
        {...listeners}
      >
        <GripVertical className="h-4 w-4" />
      </div>

      <div className="flex items-center gap-3 min-w-0 flex-1">
        <Badge variant="outline" className="text-xs shrink-0 font-medium">
          {index + 1}
        </Badge>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 flex-1">
          <Input
            value={option.label}
            onChange={(e) => onUpdate("label", e.target.value)}
            placeholder="Texto da opção..."
            className="text-sm"
          />
          <Input
            value={option.targetStepId}
            onChange={(e) => onUpdate("targetStepId", e.target.value)}
            placeholder="ID do próximo passo (opcional)"
            className="text-sm"
          />
        </div>
      </div>

      <Button
        size="sm"
        variant="ghost"
        onClick={onRemove}
        className="shrink-0 text-muted-foreground hover:text-destructive opacity-0 group-hover:opacity-100 transition-opacity"
      >
        <Trash2 className="h-4 w-4" />
      </Button>
    </div>
  );
}

interface StepPreviewProps {
  step: Step;
  onExitPreview: () => void;
}

function StepPreview({ step, onExitPreview }: StepPreviewProps) {
  return (
    <div className="h-full flex flex-col max-w-4xl mx-auto">
      <div className="flex items-center justify-between mb-8">
        <h2 className="text-xl font-semibold">Visualização</h2>
        <Button variant="outline" size="sm" onClick={onExitPreview}>
          <EyeOff className="mr-2 h-4 w-4" />
          Voltar à Edição
        </Button>
      </div>

      <Card className="flex-1">
        <CardContent className="p-8 lg:p-12">
          <div className="max-w-2xl mx-auto">
            <h1 className="text-3xl font-bold mb-8 text-center">
              {step.title}
            </h1>

            <div className="prose prose-gray max-w-none mb-8">
              <p className="text-lg leading-relaxed whitespace-pre-wrap text-center">
                {step.content}
              </p>
            </div>

            {step.type === "QUESTION" &&
              step.options &&
              step.options.length > 0 && (
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-center mb-6">
                    Escolha uma opção:
                  </h3>
                  <div className="space-y-3">
                    {step.options.map((option, index) => (
                      <Button
                        key={option.id}
                        variant="outline"
                        size="lg"
                        className="w-full justify-start text-left h-auto p-4 bg-white hover:bg-gray-50"
                        disabled
                      >
                        <span className="mr-3 text-muted-foreground font-medium">
                          {index + 1}.
                        </span>
                        <span className="text-base">{option.label}</span>
                      </Button>
                    ))}
                  </div>
                </div>
              )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


________________
...src/components/ui/alert-dialog.tsx
_______________
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


________________
...src/components/ui/alert.tsx
_______________
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


________________
...src/components/ui/badge.tsx
_______________
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


________________
...src/components/ui/button.tsx
_______________
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "../../lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };


________________
...src/components/ui/card.tsx
_______________
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


________________
...src/components/ui/dropdown-menu.tsx
_______________
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


________________
...src/components/ui/input.tsx
_______________
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


________________
...src/components/ui/label.tsx
_______________
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


________________
...src/components/ui/progress.tsx
_______________
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }


________________
...src/components/ui/select.tsx
_______________
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


________________
...src/components/ui/separator.tsx
_______________
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }


________________
...src/components/ui/sheet.tsx
_______________
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}


________________
...src/components/ui/skeleton.tsx
_______________
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }


________________
...src/components/ui/switch.tsx
_______________
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


________________
...src/components/ui/tabs.tsx
_______________
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


________________
...src/components/ui/textarea.tsx
_______________
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }


________________
...src/components/ui/toaster.tsx
_______________
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


________________
...src/components/ui/toast.tsx
_______________
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


________________
...src/db/index.ts
_______________
import Dexie from "dexie";
import type { Table } from "dexie";
import type { Flow, LogEntry, Session, StepEvent } from "../types/flow";

class TacoDB extends Dexie {
  flows!: Table<Flow, string>;
  sessions!: Table<Session, string>;
  stepEvents!: Table<StepEvent, string>;
  logs!: Table<LogEntry, string>;

  constructor() {
    super("taco");

    // Versão única com todos os stores definidos
    this.version(1).stores({
      flows: "id, updatedAt",
      sessions: "id, flowId, startedAt", // path armazenado como JSON
      stepEvents: "id, sessionId, stepId",
      logs: "id, ts, action",
    });
  }
}

export const db = new TacoDB();


________________
...src/hooks/useAnalytics.ts
_______________
// src/hooks/useAnalytics.ts
import { useState, useEffect } from "react";
import type { Flow, StepEvent } from "../types/flow";
import { db } from "../db";

export interface AnalyticsData {
  visits: number;
  completions: number;
  completionRate: number; // [0,1]
  avgTimePerStep: { stepId: string; avgTime: number }[];
  totalTimePerStep: { stepId: string; totalTime: number }[]; // novo campo
}

export function useAnalytics(flow?: Flow): AnalyticsData | null {
  const [data, setData] = useState<AnalyticsData | null>(null);

  useEffect(() => {
    if (!flow) {
      setData(null);
      return;
    }
    const f = flow;

    async function load() {
      const visits = f.visits ?? 0;
      const completions = f.completions ?? 0;
      const completionRate = visits === 0 ? 0 : completions / visits;

      // Carrega todas as sessões deste fluxo
      const sessions = await db.sessions.where("flowId").equals(f.id).toArray();
      const sessionIds = sessions.map((s) => s.id);

      // Busca todos os StepEvents dessas sessões (ou array vazio)
      const events: StepEvent[] =
        sessionIds.length > 0
          ? await db.stepEvents.where("sessionId").anyOf(sessionIds).toArray()
          : [];

      // Agrupa durações por stepId
      const durationsMap: Record<string, number[]> = {};
      for (const e of events) {
        const dur = e.leaveAt - e.enterAt;
        if (!durationsMap[e.stepId]) durationsMap[e.stepId] = [];
        durationsMap[e.stepId].push(dur);
      }

      // Calcula tempo médio e tempo total por step
      const avgTimePerStep = Object.entries(durationsMap).map(
        ([stepId, arr]) => ({
          stepId,
          avgTime: arr.reduce((sum, v) => sum + v, 0) / arr.length,
        })
      );
      const totalTimePerStep = Object.entries(durationsMap).map(
        ([stepId, arr]) => ({
          stepId,
          totalTime: arr.reduce((sum, v) => sum + v, 0),
        })
      );

      setData({
        visits,
        completions,
        completionRate,
        avgTimePerStep,
        totalTimePerStep,
      });
    }

    load();
  }, [flow]);

  return data;
}


________________
...src/hooks/useFlows.ts
_______________
import { create } from "zustand";
import { persist } from "zustand/middleware";
import { nanoid } from "nanoid";
import type { Flow } from "../types/flow";
import { db } from "../db";

interface FlowStore {
  flows: Flow[];
  load: () => Promise<void>;
  create: (title?: string) => Promise<string>; // retorna id
  clone: (id: string) => Promise<string>; // novo
  update: (flow: Flow) => Promise<void>;
  remove: (id: string) => Promise<void>;
}

export const useFlows = create<FlowStore>()(
  persist(
    (set, get) => ({
      flows: [],

      /* Carrega do IndexedDB (ordenado por updatedAt desc.) */
      load: async () => {
        const flows = await db.flows.orderBy("updatedAt").reverse().toArray();
        set({ flows });
      },

      /* Cria um fluxo vazio */
      create: async (title = "Untitled flow") => {
        const id = nanoid();
        const now = Date.now();
        const flow: Flow = {
          id,
          title,
          status: "DRAFT",
          steps: [],
          visits: 0,
          completions: 0,
          updatedAt: now,
        };
        await db.flows.put(flow);
        set({ flows: [flow, ...get().flows] });
        return id;
      },

      /* Clona fluxo existente */
      clone: async (id) => {
        const orig = await db.flows.get(id);
        if (!orig) throw new Error("Flow not found");
        const copy: Flow = {
          ...orig,
          id: nanoid(),
          title: `${orig.title} (copy)`,
          status: "DRAFT",
          visits: 0,
          completions: 0,
          updatedAt: Date.now(),
        };
        await db.flows.put(copy);
        set({ flows: [copy, ...get().flows] });
        return copy.id;
      },

      /* Atualiza fluxo */
      update: async (flow) => {
        flow.updatedAt = Date.now();
        await db.flows.put(flow);
        set((s) => ({
          flows: s.flows.map((f) => (f.id === flow.id ? flow : f)),
        }));
      },

      /* Remove fluxo */
      remove: async (id) => {
        await db.flows.delete(id);
        set((s) => ({ flows: s.flows.filter((f) => f.id !== id) }));
      },
    }),
    { name: "taco-flows" } // chave localStorage
  )
);


________________
...src/hooks/usePlayer.ts
_______________
// src/hooks/usePlayer.ts

import { useEffect, useState, useRef, useCallback } from "react";
import { nanoid } from "nanoid";

import type { Flow, Step, PathItem } from "../types/flow";
import { db } from "../db";
import { useFlows } from "./useFlows";

interface PlayerState {
  step: Step | null;
  index: number;
  progress: number;
  next(): void;
  choose(targetStepId: string): void;
}

export function usePlayer(flow?: Flow): PlayerState {
  const { update } = useFlows();
  const [index, setIndex] = useState(0);

  const sessionId = useRef<string | null>(null);
  const lastEnterAt = useRef<number>(Date.now());
  const pathRef = useRef<PathItem[]>([]);

  // 1) iniciar sessão apenas uma vez
  useEffect(() => {
    if (!flow) return;
    // se já criamos uma sessão para este fluxo, não recriamos
    if (sessionId.current) return;

    const sid = nanoid();
    sessionId.current = sid;

    // incrementa visits
    update({ ...flow, visits: (flow.visits ?? 0) + 1 });

    // zera o pathRef
    pathRef.current = [];

    // cria sessão com path inicialmente vazio
    db.sessions.put({
      id: sid,
      flowId: flow.id,
      startedAt: Date.now(),
      path: [],
    });

    // armazena timestamp de entrada no passo inicial
    lastEnterAt.current = Date.now();
  }, [flow, update]);

  // 2) registra saída e entrada de passos
  const registerLeaveEnter = useCallback(
    (prevStepId: string, nextStepId: string | null) => {
      if (!sessionId.current || !flow) return;

      const leaveAt = Date.now();
      const enterAt = lastEnterAt.current;
      const timeSpent = leaveAt - enterAt;

      const prevStep = flow.steps.find((s) => s.id === prevStepId)!;
      const item: PathItem = {
        id: prevStepId,
        title: prevStep.title,
        enterAt,
        leaveAt,
        timeSpent,
      };

      pathRef.current.push(item);
      db.sessions.update(sessionId.current, { path: pathRef.current });

      if (nextStepId) {
        lastEnterAt.current = leaveAt;
      }
    },
    [flow]
  );

  // 3) navegação interna
  const goToIndex = useCallback(
    (newIdx: number) => {
      if (!flow) return;

      const prev = flow.steps[index];
      const next = flow.steps[newIdx] ?? null;

      registerLeaveEnter(prev.id, next?.id ?? null);
      setIndex(newIdx);

      if (newIdx === -1) {
        // conclusão
        update({ ...flow, completions: (flow.completions ?? 0) + 1 });
        if (sessionId.current) {
          db.sessions.update(sessionId.current, { finishedAt: Date.now() });
        }
      }
    },
    [flow, index, registerLeaveEnter, update]
  );

  // 4) funções expostas
  const next = useCallback(() => {
    if (!flow) return;
    const newIdx = index + 1 < flow.steps.length ? index + 1 : -1;
    goToIndex(newIdx);
  }, [flow, index, goToIndex]);

  const choose = useCallback(
    (targetStepId: string) => {
      if (!flow) return;
      const targetIdx = flow.steps.findIndex((s) => s.id === targetStepId);
      goToIndex(targetIdx >= 0 ? targetIdx : -1);
    },
    [flow, goToIndex]
  );

  // 5) retorna estado
  if (!flow) {
    return { step: null, index: -1, progress: 0, next, choose };
  }
  const step = index >= 0 ? flow.steps[index] : null;
  const progress =
    flow.steps.length === 0 ? 0 : Math.min((index + 1) / flow.steps.length, 1);

  return { step, index, progress, next, choose };
}


________________
...src/hooks/use-toast.ts
_______________
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


________________
...src/index.css
_______________
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;
  width: 100%;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root {
  width: 100%;
  margin: 0 auto;
  text-align: center;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


________________
...src/lib/utils.ts
_______________
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


________________
...src/main.tsx
_______________
/// <reference types="vite-plugin-pwa/client" />

import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";

import "./index.css";
import { registerSW } from "virtual:pwa-register";

import Dashboard from "./pages/Dashboard";
import FlowPlayer from "./pages/FlowPlayer";
import Analytics from "./pages/Analytics";
import FlowEditor from "./pages/FlowEditor";

registerSW({ immediate: true });

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <BrowserRouter>
      <Routes>
        {/* Home - lista todos os fluxos */}
        <Route path="/" element={<Dashboard />} />

        {/* Editor visual de um fluxo */}
        <Route path="/flows/:id/edit" element={<FlowEditor />} />

        {/* Player (execução) de um fluxo */}
        <Route path="/flows/:id/play" element={<FlowPlayer />} />

        {/* Analytics de um fluxo */}
        <Route path="/flows/:id/analytics" element={<Analytics />} />

        {/* Qualquer rota desconhecida redireciona para o Dashboard */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </BrowserRouter>
  </StrictMode>
);


________________
...src/pages/Analytics.tsx
_______________
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { useFlows } from "../hooks/useFlows";
import { useAnalytics } from "../hooks/useAnalytics";
import { Button } from "../components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../components/ui/card";
import { db } from "../db";
import type { Session, PathItem, Flow } from "../types/flow";
import {
  ResponsiveContainer,
  BarChart,
  Bar,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  Cell,
} from "recharts";

interface SessionRun {
  sessionId: string;
  startedAt: number;
  path: PathItem[];
}

export default function Analytics() {
  const { id = "" } = useParams<{ id: string }>();
  const { flows, load, update } = useFlows();
  const [recentRuns, setRecentRuns] = useState<SessionRun[]>([]);
  const [totalByStepData, setTotalByStepData] = useState<
    { name: string; totalTime: number; color: string }[]
  >([]);

  const COLORS = [
    "#4e73df",
    "#1cc88a",
    "#36b9cc",
    "#f6c23e",
    "#e74a3b",
    "#858796",
  ];

  useEffect(() => {
    load();
  }, [load]);

  const flow = flows.find((f) => f.id === id);
  const stats = useAnalytics(flow ?? undefined);

  useEffect(() => {
    if (!flow || !stats) return;
    (async () => {
      const all: Session[] = await db.sessions
        .where("flowId")
        .equals(flow.id)
        .toArray();
      const lastFive = all
        .sort((a, b) => b.startedAt - a.startedAt)
        .slice(0, 5);

      setRecentRuns(
        lastFive.map((s) => ({
          sessionId: s.id,
          startedAt: s.startedAt,
          path: Array.isArray(s.path) ? s.path : [],
        }))
      );
    })();
  }, [flow?.id, stats]);

  useEffect(() => {
    if (!flow) return;
    (async () => {
      const all: Session[] = await db.sessions
        .where("flowId")
        .equals(flow.id)
        .toArray();
      const agg: Record<string, number> = {};
      all.forEach((s) => {
        if (Array.isArray(s.path)) {
          s.path.forEach((p: PathItem) => {
            agg[p.id] = (agg[p.id] || 0) + p.timeSpent;
          });
        }
      });
      const arr = flow.steps.map((step, idx) => ({
        name: step.title,
        totalTime: +(agg[step.id] || 0) / 1000,
        color: COLORS[idx % COLORS.length],
      }));
      setTotalByStepData(arr);
    })();
  }, [flow?.id]);

  if (!flow) return <p className="p-6">Carregando analytics…</p>;
  if (!stats) return <p className="p-6">Carregando métricas…</p>;

  const f: Flow = flow;
  const st = stats;

  async function handleClear() {
    if (!window.confirm("Deseja limpar todas as métricas deste fluxo?")) return;
    const sessions = await db.sessions.where("flowId").equals(f.id).toArray();
    const ids = sessions.map((s) => s.id);
    if (ids.length) {
      await db.stepEvents.where("sessionId").anyOf(ids).delete();
      await db.sessions.where("flowId").equals(f.id).delete();
    }
    update({ ...f, visits: 0, completions: 0 });
    setRecentRuns([]);
    setTotalByStepData([]);
  }

  const slowest = totalByStepData.reduce(
    (p, c) => (c.totalTime > p.totalTime ? c : p),
    {
      name: "",
      totalTime: 0,
      color: "",
    }
  );

  const stepTitles = f.steps.map((s) => s.title);
  const timelineData = recentRuns.map((run, idx) => {
    const row: any = { name: `Sessão #${idx + 1}` };
    run.path.forEach((p) => (row[p.title] = +(p.timeSpent / 1000).toFixed(1)));
    return row;
  });

  const allDur = recentRuns
    .flatMap((r) => r.path.map((p) => p.timeSpent))
    .reduce((mx, v) => (v > mx ? v : mx), 0);

  const areaData = recentRuns.map((run, idx) => {
    const row: any = { name: `#${idx + 1}` };
    run.path.forEach((p) => (row[p.title] = +(p.timeSpent / 1000).toFixed(1)));
    return row;
  });

  return (
    <div className="min-h-screen bg-gray-50/50 p-3 sm:p-4 lg:p-6">
      <div className="mx-auto max-w-7xl space-y-4 sm:space-y-6 lg:space-y-8">
        {/* Header */}
        <Card>
          <CardHeader className="pb-4">
            <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
              <CardTitle className="text-xl sm:text-2xl lg:text-3xl">
                Analytics: {f.title}
              </CardTitle>
              <div className="flex flex-col gap-2 sm:flex-row">
                <Button
                  size="sm"
                  variant="secondary"
                  asChild
                  className="w-full sm:w-auto"
                >
                  <Link to="/">Voltar</Link>
                </Button>
                <Button
                  size="sm"
                  variant="destructive"
                  onClick={handleClear}
                  className="w-full sm:w-auto"
                >
                  Limpar Métricas
                </Button>
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* Metrics Cards */}
        <div className="grid grid-cols-1 gap-3 sm:grid-cols-2 lg:grid-cols-4 sm:gap-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Visits
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="text-2xl font-bold sm:text-3xl">{st.visits}</div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Completions
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="text-2xl font-bold sm:text-3xl">
                {st.completions}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                Completion Rate
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="text-2xl font-bold sm:text-3xl">
                {(st.completionRate * 100).toFixed(1)}%
              </div>
            </CardContent>
          </Card>

          <Card className="bg-yellow-50 border-yellow-200">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-yellow-800">
                Passo mais lento
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="text-sm font-medium text-yellow-900 sm:text-base">
                {slowest.name}
              </div>
              <div className="text-lg font-bold text-yellow-800 sm:text-xl">
                {slowest.totalTime.toFixed(1)}s
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Bar Chart - Total Time per Step */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg sm:text-xl">
              Tempo total por passo (s)
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64 w-full sm:h-80 lg:h-96">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={totalByStepData}
                  margin={{
                    top: 20,
                    right: 20,
                    bottom: window.innerWidth < 640 ? 80 : 60,
                    left: 20,
                  }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis
                    dataKey="name"
                    angle={window.innerWidth < 640 ? -45 : -30}
                    textAnchor="end"
                    height={window.innerWidth < 640 ? 80 : 60}
                    fontSize={window.innerWidth < 640 ? 10 : 12}
                    interval={0}
                  />
                  <YAxis
                    unit="s"
                    fontSize={window.innerWidth < 640 ? 10 : 12}
                  />
                  <Tooltip formatter={(v: number) => `${v.toFixed(1)} s`} />
                  <Legend />
                  <Bar dataKey="totalTime">
                    {totalByStepData.map((entry, idx) => (
                      <Cell key={idx} fill={entry.color} />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Timeline Horizontal */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg sm:text-xl">
              Timeline – Últimas 5 Execuções
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-48 w-full sm:h-64 lg:h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={timelineData}
                  layout="vertical"
                  margin={{
                    left: window.innerWidth < 640 ? 60 : 80,
                    right: 20,
                    top: 20,
                    bottom: 20,
                  }}
                >
                  <XAxis
                    type="number"
                    unit="s"
                    fontSize={window.innerWidth < 640 ? 10 : 12}
                  />
                  <YAxis
                    type="category"
                    dataKey="name"
                    width={window.innerWidth < 640 ? 60 : 100}
                    fontSize={window.innerWidth < 640 ? 9 : 11}
                  />
                  <Tooltip formatter={(v: number) => `${v}s`} />
                  <Legend />
                  {stepTitles.map((title, idx) => (
                    <Bar
                      key={title}
                      dataKey={title}
                      stackId="a"
                      fill={COLORS[idx % COLORS.length]}
                    />
                  ))}
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Heatmap */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg sm:text-xl">
              Heatmap de Tempo
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <div className="min-w-full">
                <table className="w-full border-collapse text-xs sm:text-sm">
                  <thead>
                    <tr>
                      <th className="border bg-gray-50 p-2 text-left font-medium sm:p-3">
                        Sessão
                      </th>
                      {stepTitles.map((t) => (
                        <th
                          key={t}
                          className="border bg-gray-50 p-2 text-center font-medium sm:p-3"
                          style={{ minWidth: "80px" }}
                        >
                          <div className="truncate" title={t}>
                            {t}
                          </div>
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {recentRuns.map((run, i) => {
                      const map = Object.fromEntries(
                        run.path.map((p) => [p.title, p.timeSpent])
                      );
                      return (
                        <tr key={i}>
                          <td className="border p-2 font-medium sm:p-3">
                            #{i + 1}
                          </td>
                          {stepTitles.map((t, j) => {
                            const v = map[t] ?? 0;
                            const alpha = v ? 0.3 + 0.7 * (v / allDur) : 0;
                            const bg = v
                              ? `rgba(59,130,246,${alpha})`
                              : "#f3f4f6";
                            return (
                              <td
                                key={j}
                                className="border p-2 text-center sm:p-3"
                                style={{ backgroundColor: bg }}
                              >
                                {v ? Math.round(v) : "–"}
                              </td>
                            );
                          })}
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Stacked Area Chart */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg sm:text-xl">
              Área Empilhada – Últimas 5
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-56 w-full sm:h-72 lg:h-80">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart
                  data={areaData}
                  margin={{
                    top: 20,
                    right: 20,
                    left: 20,
                    bottom: 20,
                  }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis
                    dataKey="name"
                    fontSize={window.innerWidth < 640 ? 10 : 12}
                  />
                  <YAxis
                    unit="s"
                    fontSize={window.innerWidth < 640 ? 10 : 12}
                  />
                  <Tooltip formatter={(v: number) => `${v}s`} />
                  <Legend />
                  {stepTitles.map((title, idx) => (
                    <Area
                      key={title}
                      type="monotone"
                      dataKey={title}
                      stackId="1"
                      stroke={COLORS[idx % COLORS.length]}
                      fill={COLORS[idx % COLORS.length]}
                      fillOpacity={0.6}
                    />
                  ))}
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


________________
...src/pages/Dashboard.tsx
_______________
"use client";

import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  Plus,
  Copy,
  Play,
  BarChart3,
  Edit,
  MoreHorizontal,
  Search,
  Grid3X3,
  List,
} from "lucide-react";
import { useFlows } from "../hooks/useFlows";
import { Button } from "../components/ui/button";
import { Card, CardContent, CardHeader } from "../components/ui/card";
import { Badge } from "../components/ui/badge";
import { Input } from "../components/ui/input";
import { Skeleton } from "../components/ui/skeleton";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "../components/ui/dropdown-menu";
import { cn } from "../lib/utils";

type ViewMode = "grid" | "list";

export default function Dashboard() {
  const { flows, load, create, clone, isLoading } = useFlows();
  const navigate = useNavigate();
  const [searchQuery, setSearchQuery] = useState("");
  const [viewMode, setViewMode] = useState<ViewMode>("grid");
  const [isCreating, setIsCreating] = useState(false);

  useEffect(() => {
    load();
  }, [load]);

  const filteredFlows = flows.filter((flow) =>
    flow.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  async function handleNew() {
    setIsCreating(true);
    try {
      const id = await create("Novo Fluxo");
      navigate(`/flows/${id}/edit`);
    } catch (error) {
      console.error("Erro ao criar fluxo:", error);
    } finally {
      setIsCreating(false);
    }
  }

  async function handleClone(id: string, title: string) {
    try {
      const newId = await clone(id);
      navigate(`/flows/${newId}/edit`);
    } catch (error) {
      console.error("Erro ao clonar fluxo:", error);
    }
  }

  if (isLoading) {
    return <DashboardSkeleton />;
  }

  return (
    <div className="min-h-screen bg-gray-50/50">
      <div className="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
            <div className="flex flex-col items-start">
              <h1 className="text-3xl font-bold tracking-tight">Meus Fluxos</h1>
              <p className="text-muted-foreground">
                Gerencie e monitore seus fluxos de trabalho
              </p>
            </div>
            <Button onClick={handleNew} disabled={isCreating} size="lg">
              <Plus className="mr-2 h-4 w-4" />
              {isCreating ? "Criando..." : "Novo Fluxo"}
            </Button>
          </div>

          {/* Filters and Search */}
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Buscar fluxos..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10"
              />
            </div>

            <div className="flex items-center gap-2">
              <Button
                variant={viewMode === "grid" ? "default" : "outline"}
                size="sm"
                onClick={() => setViewMode("grid")}
              >
                <Grid3X3 className="h-4 w-4" />
              </Button>
              <Button
                variant={viewMode === "list" ? "default" : "outline"}
                size="sm"
                onClick={() => setViewMode("list")}
              >
                <List className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>

        {/* Content */}
        {filteredFlows.length === 0 ? (
          searchQuery ? (
            <EmptySearchState
              searchQuery={searchQuery}
              onClearSearch={() => setSearchQuery("")}
            />
          ) : (
            <EmptyState onCreateFlow={handleNew} isCreating={isCreating} />
          )
        ) : (
          <div
            className={cn(
              "gap-6",
              viewMode === "grid"
                ? "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
                : "flex flex-col space-y-4"
            )}
          >
            {filteredFlows.map((flow) => (
              <FlowCard
                key={flow.id}
                flow={flow}
                viewMode={viewMode}
                onClone={() => handleClone(flow.id, flow.title)}
                onEdit={() => navigate(`/flows/${flow.id}/edit`)}
                onPlay={() => navigate(`/flows/${flow.id}/play`)}
                onAnalytics={() => navigate(`/flows/${flow.id}/analytics`)}
              />
            ))}
          </div>
        )}

        {/* Stats */}
        {flows.length > 0 && (
          <div className="mt-12 pt-8 border-t">
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">
                  {flows.length}
                </div>
                <div className="text-sm text-muted-foreground">
                  Total de Fluxos
                </div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">
                  {flows.reduce((acc, flow) => acc + (flow.visits || 0), 0)}
                </div>
                <div className="text-sm text-muted-foreground">
                  Total de Visitas
                </div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">
                  {flows.reduce(
                    (acc, flow) => acc + (flow.completions || 0),
                    0
                  )}
                </div>
                <div className="text-sm text-muted-foreground">
                  Total de Conclusões
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

interface FlowCardProps {
  flow: any;
  viewMode: ViewMode;
  onClone: () => void;
  onEdit: () => void;
  onPlay: () => void;
  onAnalytics: () => void;
}

function FlowCard({
  flow,
  viewMode,
  onClone,
  onEdit,
  onPlay,
  onAnalytics,
}: FlowCardProps) {
  const completionRate =
    flow.visits > 0 ? (flow.completions / flow.visits) * 100 : 0;

  if (viewMode === "list") {
    return (
      <Card className="hover:shadow-md transition-all duration-200">
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-3 mb-2">
                <h3 className="font-semibold text-lg truncate">{flow.title}</h3>
                <Badge variant="secondary" className="shrink-0">
                  {flow.steps.length}{" "}
                  {flow.steps.length === 1 ? "passo" : "passos"}
                </Badge>
              </div>
              <div className="flex items-center gap-4 text-sm text-muted-foreground">
                <span>{flow.visits || 0} visitas</span>
                <span>{flow.completions || 0} conclusões</span>
                {completionRate > 0 && (
                  <span>{completionRate.toFixed(1)}% taxa de conclusão</span>
                )}
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Button variant="ghost" size="sm" onClick={onPlay}>
                <Play className="h-4 w-4 mr-1" />
                Testar
              </Button>
              <Button variant="ghost" size="sm" onClick={onAnalytics}>
                <BarChart3 className="h-4 w-4 mr-1" />
                Analytics
              </Button>
              <Button variant="ghost" size="sm" onClick={onEdit}>
                <Edit className="h-4 w-4 mr-1" />
                Editar
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm">
                    <MoreHorizontal className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem onClick={onClone}>
                    <Copy className="mr-2 h-4 w-4" />
                    Duplicar
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card
      className="group hover:shadow-lg transition-all duration-200 cursor-pointer"
      onClick={onEdit}
    >
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex-1 min-w-0">
            <h3 className="font-semibold text-lg mb-1 truncate group-hover:text-primary transition-colors">
              {flow.title}
            </h3>
            <Badge variant="secondary" className="text-xs">
              {flow.steps.length} {flow.steps.length === 1 ? "passo" : "passos"}
            </Badge>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                className="opacity-0 group-hover:opacity-100 transition-opacity"
                onClick={(e) => e.stopPropagation()}
              >
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                onClick={(e) => {
                  e.stopPropagation();
                  onClone();
                }}
              >
                <Copy className="mr-2 h-4 w-4" />
                Duplicar
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>

      <CardContent className="pt-0">
        <div className="space-y-4">
          {/* Stats */}
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <div className="font-medium text-lg">{flow.visits || 0}</div>
              <div className="text-muted-foreground">Visitas</div>
            </div>
            <div>
              <div className="font-medium text-lg">{flow.completions || 0}</div>
              <div className="text-muted-foreground">Conclusões</div>
            </div>
          </div>

          {/* Completion Rate */}
          {completionRate > 0 && (
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span className="text-muted-foreground">Taxa de conclusão</span>
                <span className="font-medium">
                  {completionRate.toFixed(1)}%
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-primary h-2 rounded-full transition-all duration-300"
                  style={{ width: `${Math.min(completionRate, 100)}%` }}
                />
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="flex gap-2 pt-2">
            <Button
              variant="outline"
              size="sm"
              className="flex-1 bg-transparent"
              onClick={(e) => {
                e.stopPropagation();
                onPlay();
              }}
            >
              <Play className="h-3 w-3 mr-1" />
              Testar
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="flex-1 bg-transparent"
              onClick={(e) => {
                e.stopPropagation();
                onAnalytics();
              }}
            >
              <BarChart3 className="h-3 w-3 mr-1" />
              Analytics
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

function EmptyState({
  onCreateFlow,
  isCreating,
}: {
  onCreateFlow: () => void;
  isCreating: boolean;
}) {
  return (
    <Card className="border-dashed">
      <CardContent className="flex flex-col items-center justify-center py-16">
        <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
          <Plus className="h-8 w-8 text-muted-foreground" />
        </div>
        <h3 className="text-lg font-semibold mb-2">
          Nenhum fluxo criado ainda
        </h3>
        <p className="text-muted-foreground text-center mb-6 max-w-sm">
          Comece criando seu primeiro fluxo de trabalho para automatizar
          processos e melhorar a experiência dos usuários.
        </p>
        <Button onClick={onCreateFlow} disabled={isCreating} size="lg">
          <Plus className="mr-2 h-4 w-4" />
          {isCreating ? "Criando..." : "Criar Primeiro Fluxo"}
        </Button>
      </CardContent>
    </Card>
  );
}

function EmptySearchState({
  searchQuery,
  onClearSearch,
}: {
  searchQuery: string;
  onClearSearch: () => void;
}) {
  return (
    <Card>
      <CardContent className="flex flex-col items-center justify-center py-16">
        <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
          <Search className="h-8 w-8 text-muted-foreground" />
        </div>
        <h3 className="text-lg font-semibold mb-2">
          Nenhum resultado encontrado
        </h3>
        <p className="text-muted-foreground text-center mb-6 max-w-sm">
          Não encontramos nenhum fluxo com o termo "{searchQuery}". Tente buscar
          por outro termo.
        </p>
        <Button variant="outline" onClick={onClearSearch}>
          Limpar busca
        </Button>
      </CardContent>
    </Card>
  );
}

function DashboardSkeleton() {
  return (
    <div className="min-h-screen bg-gray-50/50">
      <div className="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
        <div className="mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
            <div>
              <Skeleton className="h-9 w-48 mb-2" />
              <Skeleton className="h-5 w-64" />
            </div>
            <Skeleton className="h-10 w-32" />
          </div>
          <div className="flex flex-col sm:flex-row gap-4">
            <Skeleton className="h-10 w-full max-w-sm" />
            <div className="flex gap-2">
              <Skeleton className="h-10 w-10" />
              <Skeleton className="h-10 w-10" />
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {Array.from({ length: 8 }).map((_, i) => (
            <Card key={i}>
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <Skeleton className="h-6 w-3/4 mb-2" />
                    <Skeleton className="h-5 w-16" />
                  </div>
                  <Skeleton className="h-8 w-8" />
                </div>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Skeleton className="h-6 w-8 mb-1" />
                      <Skeleton className="h-4 w-12" />
                    </div>
                    <div>
                      <Skeleton className="h-6 w-8 mb-1" />
                      <Skeleton className="h-4 w-16" />
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Skeleton className="h-8 flex-1" />
                    <Skeleton className="h-8 flex-1" />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}


________________
...src/pages/FlowEditor.tsx
_______________
import type React from "react";

import { useEffect, useMemo, useCallback, useState } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import { DndContext, closestCenter, type DragEndEvent } from "@dnd-kit/core";
import {
  arrayMove,
  SortableContext,
  verticalListSortingStrategy,
  useSortable,
} from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import {
  GripVertical,
  Plus,
  Trash2,
  ArrowLeft,
  Menu,
  Eye,
  Settings,
} from "lucide-react";
import { nanoid } from "nanoid";
import { useFlows } from "../hooks/useFlows";
import { Button } from "../components/ui/button";
import { Card, CardContent } from "../components/ui/card";
import { Sheet, SheetContent, SheetTrigger } from "../components/ui/sheet";
import { Separator } from "../components/ui/separator";
import { Badge } from "../components/ui/badge";
import { Skeleton } from "../components/ui/skeleton";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "../components/ui/alert-dialog";
import { useToast } from "../hooks/use-toast";
import { cn } from "../lib/utils";
import StepForm from "../components/flow/StepForm";
import type { Step } from "../types/flow";

const STEP_TYPES = {
  TEXT: { label: "Texto", color: "bg-blue-100 text-blue-800" },
  FORM: { label: "Formulário", color: "bg-green-100 text-green-800" },
  MEDIA: { label: "Mídia", color: "bg-purple-100 text-purple-800" },
} as const;

export default function FlowEditor() {
  const { id = "" } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { flows, load, update, remove, isLoading } = useFlows();
  const { toast } = useToast();
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  useEffect(() => {
    load();
  }, [load]);

  const flow = useMemo(() => flows.find((f) => f.id === id), [flows, id]);
  const selectedStep = useMemo(
    () => flow?.steps.find((s) => s.id === selectedId) ?? null,
    [flow?.steps, selectedId]
  );
  const stepIds = useMemo(
    () => flow?.steps.map((s) => s.id) ?? [],
    [flow?.steps]
  );

  const handleDelete = useCallback(async () => {
    if (!flow) return;

    setIsDeleting(true);
    try {
      await remove(flow.id);
      toast({
        title: "Fluxo excluído",
        description: "O fluxo foi excluído com sucesso.",
      });
      navigate("/");
    } catch (error) {
      toast({
        title: "Erro ao excluir",
        description: "Não foi possível excluir o fluxo. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  }, [flow, remove, navigate, toast]);

  const handleDragEnd = useCallback(
    (event: DragEndEvent) => {
      if (!flow) return;

      const { active, over } = event;
      if (!over || active.id === over.id) return;

      const oldIndex = flow.steps.findIndex((s) => s.id === active.id);
      const newIndex = flow.steps.findIndex((s) => s.id === over.id);
      if (oldIndex === -1 || newIndex === -1) return;

      const newSteps = arrayMove(flow.steps, oldIndex, newIndex).map(
        (s, idx) => ({ ...s, order: idx })
      );

      update({ ...flow, steps: newSteps });
      toast({
        title: "Ordem atualizada",
        description: "A ordem dos passos foi atualizada.",
      });
    },
    [flow, update, toast]
  );

  const handleAddStep = useCallback(() => {
    if (!flow) return;

    const newStep: Step = {
      id: nanoid(),
      order: flow.steps.length,
      type: "TEXT",
      title: "Novo passo",
      content: "",
    };

    update({ ...flow, steps: [...flow.steps, newStep] });
    setSelectedId(newStep.id);
    setIsMobileMenuOpen(false);

    toast({
      title: "Passo adicionado",
      description: "Um novo passo foi adicionado ao fluxo.",
    });
  }, [flow, update, toast]);

  const handleStepChange = useCallback(
    (updated: Step) => {
      if (!flow) return;

      const newSteps = flow.steps.map((s) =>
        s.id === updated.id ? updated : s
      );
      update({ ...flow, steps: newSteps });
    },
    [flow, update]
  );

  const handleStepSelect = useCallback((stepId: string) => {
    setSelectedId(stepId);
    setIsMobileMenuOpen(false);
  }, []);

  if (isLoading) {
    return <FlowEditorSkeleton />;
  }

  if (!flow) {
    return (
      <div className="flex h-screen items-center justify-center">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6">
            <div className="text-center">
              <h2 className="text-lg font-semibold mb-2">
                Fluxo não encontrado
              </h2>
              <p className="text-muted-foreground mb-4">
                O fluxo que você está procurando não existe ou foi removido.
              </p>
              <Button asChild>
                <Link to="/">
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Voltar
                </Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex h-screen bg-gray-50/50">
      {/* Desktop Sidebar */}
      <aside className="hidden lg:flex w-80 flex-col border-r bg-white">
        <StepsSidebar
          flow={flow}
          selectedId={selectedId}
          onStepSelect={handleStepSelect}
          onAddStep={handleAddStep}
          onDragEnd={handleDragEnd}
          stepIds={stepIds}
        />
      </aside>

      {/* Mobile/Tablet Header */}
      <div className="lg:hidden fixed top-0 left-0 right-0 z-50 bg-white border-b">
        <div className="flex items-center justify-between p-4">
          <div className="flex items-center gap-3">
            <Button variant="ghost" size="sm" asChild>
              <Link to="/">
                <ArrowLeft className="h-4 w-4" />
              </Link>
            </Button>
            <div>
              <h1 className="font-semibold truncate max-w-[200px]">
                {flow.title}
              </h1>
              <p className="text-xs text-muted-foreground">
                {flow.steps.length}{" "}
                {flow.steps.length === 1 ? "passo" : "passos"}
              </p>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
              <SheetTrigger asChild>
                <Button variant="outline" size="sm">
                  <Menu className="h-4 w-4" />
                </Button>
              </SheetTrigger>
              <SheetContent side="left" className="w-80 p-0">
                <StepsSidebar
                  flow={flow}
                  selectedId={selectedId}
                  onStepSelect={handleStepSelect}
                  onAddStep={handleAddStep}
                  onDragEnd={handleDragEnd}
                  stepIds={stepIds}
                  isMobile
                />
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <main className="flex-1 flex flex-col">
        {/* Desktop Header */}
        <header className="hidden lg:flex items-center justify-between p-6 border-b bg-white">
          <div className="flex items-center gap-4">
            <Button variant="ghost" size="sm" asChild>
              <Link to="/">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Voltar
              </Link>
            </Button>
            <Separator orientation="vertical" className="h-6" />
            <div>
              <h1 className="text-xl font-bold">{flow.title}</h1>
              <p className="text-sm text-muted-foreground">
                {flow.steps.length}{" "}
                {flow.steps.length === 1 ? "passo" : "passos"}
              </p>
            </div>
          </div>

          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm">
              <Eye className="mr-2 h-4 w-4" />
              Visualizar
            </Button>
            <Button variant="outline" size="sm">
              <Settings className="mr-2 h-4 w-4" />
              Configurações
            </Button>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button variant="destructive" size="sm" disabled={isDeleting}>
                  <Trash2 className="mr-2 h-4 w-4" />
                  Excluir
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Excluir fluxo</AlertDialogTitle>
                  <AlertDialogDescription>
                    Esta ação não pode ser desfeita. O fluxo "{flow.title}" será
                    permanentemente excluído junto com todos os seus dados.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancelar</AlertDialogCancel>
                  <AlertDialogAction
                    onClick={handleDelete}
                    className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                  >
                    Excluir permanentemente
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </div>
        </header>

        {/* Content Area */}
        <div className="flex-1 overflow-hidden">
          <div className="h-full p-4 lg:p-6 pt-20 lg:pt-6">
            {selectedStep ? (
              <div className="h-full">
                <div className="mb-4 lg:hidden">
                  <div className="flex items-center gap-2 mb-2">
                    <Badge
                      variant="secondary"
                      className={
                        STEP_TYPES[selectedStep.type as keyof typeof STEP_TYPES]
                          ?.color
                      }
                    >
                      {
                        STEP_TYPES[selectedStep.type as keyof typeof STEP_TYPES]
                          ?.label
                      }
                    </Badge>
                    <span className="text-sm text-muted-foreground">
                      Passo {selectedStep.order + 1}
                    </span>
                  </div>
                  <h2 className="text-lg font-semibold">
                    {selectedStep.title}
                  </h2>
                </div>
                <StepForm step={selectedStep} onChange={handleStepChange} />
              </div>
            ) : (
              <EmptyState onAddStep={handleAddStep} />
            )}
          </div>
        </div>
      </main>
    </div>
  );
}

interface StepsSidebarProps {
  flow: any;
  selectedId: string | null;
  onStepSelect: (id: string) => void;
  onAddStep: () => void;
  onDragEnd: (event: DragEndEvent) => void;
  stepIds: string[];
  isMobile?: boolean;
}

function StepsSidebar({
  flow,
  selectedId,
  onStepSelect,
  onAddStep,
  onDragEnd,
  stepIds,
  isMobile = false,
}: StepsSidebarProps) {
  return (
    <div className="flex flex-col h-full">
      <div className="p-4 border-b">
        {isMobile && (
          <div className="mb-4">
            <h2 className="font-semibold">{flow.title}</h2>
            <p className="text-sm text-muted-foreground">
              {flow.steps.length} {flow.steps.length === 1 ? "passo" : "passos"}
            </p>
          </div>
        )}

        <div className="flex items-center justify-between mb-4">
          <h3 className="font-medium">Passos do Fluxo</h3>
          <Button size="sm" onClick={onAddStep}>
            <Plus className="h-4 w-4 mr-1" />
            Adicionar
          </Button>
        </div>
      </div>

      <div className="flex-1 overflow-y-auto p-4">
        {flow.steps.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-sm text-muted-foreground mb-3">
              Nenhum passo criado ainda
            </p>
            <Button size="sm" variant="outline" onClick={onAddStep}>
              <Plus className="h-4 w-4 mr-1" />
              Criar primeiro passo
            </Button>
          </div>
        ) : (
          <DndContext collisionDetection={closestCenter} onDragEnd={onDragEnd}>
            <SortableContext
              items={stepIds}
              strategy={verticalListSortingStrategy}
            >
              <div className="space-y-2">
                {flow.steps.map((step: any, index: number) => (
                  <StepItem
                    key={step.id}
                    id={step.id}
                    step={step}
                    index={index}
                    selected={step.id === selectedId}
                    onSelect={() => onStepSelect(step.id)}
                  />
                ))}
              </div>
            </SortableContext>
          </DndContext>
        )}
      </div>
    </div>
  );
}

interface StepItemProps {
  id: string;
  step: any;
  index: number;
  selected: boolean;
  onSelect: () => void;
}

function StepItem({ id, step, index, selected, onSelect }: StepItemProps) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging,
  } = useSortable({ id });

  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : undefined,
  } as React.CSSProperties;

  return (
    <div
      ref={setNodeRef}
      style={style}
      className={cn(
        "group relative rounded-lg border p-3 cursor-pointer transition-all",
        "hover:border-primary/50 hover:shadow-sm",
        selected && "border-primary bg-primary/5 shadow-sm",
        isDragging && "shadow-lg"
      )}
      onClick={onSelect}
    >
      <div className="flex items-start gap-3">
        <div
          className="mt-1 cursor-grab active:cursor-grabbing opacity-40 group-hover:opacity-100 transition-opacity"
          {...attributes}
          {...listeners}
        >
          <GripVertical className="h-4 w-4" />
        </div>

        <div className="flex-1 min-w-0">
          <div className="flex items-center gap-2 mb-1">
            <span className="text-xs font-medium text-muted-foreground">
              #{index + 1}
            </span>
            <Badge
              variant="secondary"
              className={cn(
                "text-xs px-1.5 py-0.5",
                STEP_TYPES[step.type as keyof typeof STEP_TYPES]?.color
              )}
            >
              {STEP_TYPES[step.type as keyof typeof STEP_TYPES]?.label}
            </Badge>
          </div>
          <h4 className="font-medium text-sm truncate">{step.title}</h4>
          {step.content && (
            <p className="text-xs text-muted-foreground mt-1 line-clamp-2">
              {step.content}
            </p>
          )}
        </div>
      </div>
    </div>
  );
}

function EmptyState({ onAddStep }: { onAddStep: () => void }) {
  return (
    <Card className="h-full flex items-center justify-center">
      <CardContent className="text-center py-12">
        <div className="mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4">
          <Plus className="h-6 w-6 text-muted-foreground" />
        </div>
        <h3 className="text-lg font-semibold mb-2">Nenhum passo selecionado</h3>
        <p className="text-muted-foreground mb-6 max-w-sm">
          Selecione um passo na barra lateral para editá-lo, ou crie um novo
          passo para começar.
        </p>
        <Button onClick={onAddStep}>
          <Plus className="mr-2 h-4 w-4" />
          Criar primeiro passo
        </Button>
      </CardContent>
    </Card>
  );
}

function FlowEditorSkeleton() {
  return (
    <div className="flex h-screen">
      <aside className="hidden lg:flex w-80 border-r p-4">
        <div className="w-full">
          <div className="flex items-center justify-between mb-4">
            <Skeleton className="h-5 w-20" />
            <Skeleton className="h-8 w-20" />
          </div>
          <div className="space-y-3">
            {Array.from({ length: 3 }).map((_, i) => (
              <Skeleton key={i} className="h-16 w-full" />
            ))}
          </div>
        </div>
      </aside>
      <main className="flex-1">
        <div className="p-6 border-b">
          <div className="flex items-center justify-between">
            <Skeleton className="h-8 w-48" />
            <Skeleton className="h-8 w-24" />
          </div>
        </div>
        <div className="p-6">
          <Skeleton className="h-96 w-full" />
        </div>
      </main>
    </div>
  );
}


________________
...src/pages/FlowPlayer.tsx
_______________
"use client";

import { useEffect, useState } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import {
  ArrowLeft,
  ArrowRight,
  Home,
  Clock,
  CheckCircle,
  AlertCircle,
} from "lucide-react";
import { useFlows } from "../hooks/useFlows";
import { usePlayer } from "../hooks/usePlayer";
import { Button } from "../components/ui/button";
import { Card, CardContent } from "../components/ui/card";
import { Badge } from "../components/ui/badge";
import { Progress } from "../components/ui/progress";
import { Skeleton } from "../components/ui/skeleton";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "../components/ui/alert-dialog";
import { cn } from "../lib/utils";

export default function FlowPlayer() {
  const { id = "" } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { flows, load, isLoading } = useFlows();
  const [startTime] = useState(Date.now());
  const [isExiting, setIsExiting] = useState(false);

  useEffect(() => {
    load();
  }, [load]);

  const flow = flows.find((f) => f.id === id);
  const { step, index, progress, next, choose, canGoBack, goBack } =
    usePlayer(flow);

  const handleExit = () => {
    setIsExiting(true);
    navigate("/");
  };

  if (isLoading) {
    return <PlayerSkeleton />;
  }

  if (!flow) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="pt-6">
            <div className="text-center">
              <AlertCircle className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
              <h2 className="text-lg font-semibold mb-2">
                Fluxo não encontrado
              </h2>
              <p className="text-muted-foreground mb-4">
                O fluxo que você está tentando acessar não existe.
              </p>
              <Button asChild>
                <Link to="/">
                  <Home className="mr-2 h-4 w-4" />
                  Voltar ao Dashboard
                </Link>
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (index === -1) {
    const elapsedTime = Math.round((Date.now() - startTime) / 1000);
    return (
      <CompletionScreen
        flowTitle={flow.title}
        totalSteps={flow.steps.length}
        elapsedTime={elapsedTime}
        onBackToDashboard={handleExit}
      />
    );
  }

  const total = flow.steps.length;
  const current = index + 1;
  const progressPercentage = progress * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-sm border-b sticky top-0 z-10">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button variant="ghost" size="sm" disabled={isExiting}>
                    <ArrowLeft className="mr-2 h-4 w-4" />
                    Sair
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent>
                  <AlertDialogHeader>
                    <AlertDialogTitle>Sair do fluxo?</AlertDialogTitle>
                    <AlertDialogDescription>
                      Seu progresso será perdido se você sair agora. Tem certeza
                      que deseja continuar?
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel>Cancelar</AlertDialogCancel>
                    <AlertDialogAction onClick={handleExit}>
                      Sair mesmo assim
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>

              <div className="hidden sm:block">
                <h1 className="font-semibold text-lg">{flow.title}</h1>
                <p className="text-sm text-muted-foreground">
                  Passo {current} de {total}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Badge variant="secondary" className="hidden sm:inline-flex">
                <Clock className="mr-1 h-3 w-3" />
                {Math.round((Date.now() - startTime) / 1000)}s
              </Badge>
              <div className="text-sm font-medium text-muted-foreground">
                {Math.round(progressPercentage)}%
              </div>
            </div>
          </div>

          {/* Progress Bar */}
          <div className="mt-4">
            <Progress value={progressPercentage} className="h-2" />
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1 flex items-center justify-center p-4 py-8">
        <div className="w-full max-w-3xl">
          <Card className="shadow-xl border-0 bg-white/95 backdrop-blur-sm">
            <CardContent className="p-8 sm:p-12">
              {step && (
                <div className="space-y-8">
                  {/* Step Header */}
                  <div className="text-center space-y-4">
                    <div className="sm:hidden">
                      <Badge variant="outline" className="mb-2">
                        Passo {current} de {total}
                      </Badge>
                    </div>
                    <h2 className="text-2xl sm:text-3xl font-bold leading-tight">
                      {step.title}
                    </h2>
                  </div>

                  {/* Step Content */}
                  <div className="text-center">
                    <div className="prose prose-lg max-w-none text-muted-foreground">
                      <p className="whitespace-pre-wrap leading-relaxed">
                        {step.content}
                      </p>
                    </div>
                  </div>

                  {/* Step Actions */}
                  <div className="space-y-6">
                    {step.type === "QUESTION" ? (
                      <div className="space-y-3">
                        <h3 className="text-lg font-medium text-center mb-6">
                          Escolha uma opção:
                        </h3>
                        <div className="grid gap-3">
                          {step.options?.map((opt, optIndex) => (
                            <Button
                              key={`${opt.label}-${opt.targetStepId}-${optIndex}`}
                              variant="outline"
                              size="lg"
                              className="w-full justify-start text-left h-auto p-4 bg-white hover:bg-gray-50 transition-all duration-200 hover:shadow-md"
                              onClick={() => choose(opt.targetStepId)}
                            >
                              <span className="mr-3 text-muted-foreground font-medium">
                                {optIndex + 1}.
                              </span>
                              <span className="text-base">{opt.label}</span>
                            </Button>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <div className="flex justify-center">
                        <Button size="lg" onClick={next} className="px-8">
                          {current === total ? "Finalizar" : "Continuar"}
                          <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                      </div>
                    )}

                    {/* Navigation */}
                    <div className="flex justify-between items-center pt-4 border-t">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={goBack}
                        disabled={!canGoBack}
                        className={cn(
                          !canGoBack && "opacity-50 cursor-not-allowed"
                        )}
                      >
                        <ArrowLeft className="mr-2 h-4 w-4" />
                        Voltar
                      </Button>
                      <div className="flex items-center gap-2">
                        {Array.from({ length: total }).map((_, i) => (
                          <div
                            key={i}
                            className={cn(
                              "w-2 h-2 rounded-full transition-all duration-300",
                              i < current
                                ? "bg-primary"
                                : i === current - 1
                                ? "bg-primary/60 scale-125"
                                : "bg-gray-200"
                            )}
                          />
                        ))}
                      </div>
                      <div className="w-16" /> {/* Spacer for alignment */}
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}

interface CompletionScreenProps {
  flowTitle: string;
  totalSteps: number;
  elapsedTime: number;
  onBackToDashboard: () => void;
}

function CompletionScreen({
  flowTitle,
  totalSteps,
  elapsedTime,
  onBackToDashboard,
}: CompletionScreenProps) {
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return mins > 0 ? `${mins}m ${secs}s` : `${secs}s`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-lg shadow-xl border-0 bg-white/95 backdrop-blur-sm">
        <CardContent className="pt-8 pb-8 text-center">
          <div className="space-y-6">
            {/* Success Icon */}
            <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
              <CheckCircle className="h-8 w-8 text-green-600" />
            </div>

            {/* Title */}
            <div className="space-y-2">
              <h1 className="text-2xl font-bold text-gray-900">
                Fluxo Concluído! 🎉
              </h1>
              <p className="text-muted-foreground">
                Você completou com sucesso o fluxo "{flowTitle}"
              </p>
            </div>

            {/* Stats */}
            <div className="grid grid-cols-2 gap-4 py-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">
                  {totalSteps}
                </div>
                <div className="text-sm text-muted-foreground">
                  Passos completados
                </div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">
                  {formatTime(elapsedTime)}
                </div>
                <div className="text-sm text-muted-foreground">Tempo total</div>
              </div>
            </div>

            {/* Actions */}
            <div className="space-y-3 pt-4">
              <Button onClick={onBackToDashboard} size="lg" className="w-full">
                <Home className="mr-2 h-4 w-4" />
                Voltar ao Dashboard
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="w-full bg-transparent"
                onClick={() => window.location.reload()}
              >
                Refazer Fluxo
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function PlayerSkeleton() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header Skeleton */}
      <header className="bg-white/80 backdrop-blur-sm border-b">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Skeleton className="h-8 w-16" />
              <div className="hidden sm:block space-y-2">
                <Skeleton className="h-5 w-32" />
                <Skeleton className="h-4 w-24" />
              </div>
            </div>
            <div className="flex items-center gap-3">
              <Skeleton className="h-6 w-12" />
              <Skeleton className="h-4 w-8" />
            </div>
          </div>
          <div className="mt-4">
            <Skeleton className="h-2 w-full" />
          </div>
        </div>
      </header>

      {/* Main Content Skeleton */}
      <main className="flex-1 flex items-center justify-center p-4 py-8">
        <div className="w-full max-w-3xl">
          <Card className="shadow-xl border-0">
            <CardContent className="p-8 sm:p-12">
              <div className="space-y-8">
                <div className="text-center space-y-4">
                  <Skeleton className="h-8 w-3/4 mx-auto" />
                </div>
                <div className="text-center">
                  <Skeleton className="h-20 w-full" />
                </div>
                <div className="space-y-3">
                  <Skeleton className="h-12 w-full" />
                  <Skeleton className="h-12 w-full" />
                  <Skeleton className="h-12 w-full" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}


________________
...src/types/flow.ts
_______________
// src/types/flow.ts

/**
 * Opções de ramificação de um passo do tipo QUESTION
 */
export interface StepOption {
  label: string;
  targetStepId: string;
}

/**
 * Representa um passo dentro de um Flow.
 * Inclui título, conteúdo e, opcionalmente, opções de ramificação.
 */
export interface Step {
  id: string;
  order: number;
  type: "TEXT" | "QUESTION" | "MEDIA";
  title: string;
  content: string;
  options?: StepOption[];
}

/**
 * Fluxo completo, composto por uma sequência de Steps.
 * Guarda contadores de visitas e conclusões, além de timestamp de atualização.
 */
export interface Flow {
  id: string;
  title: string;
  description?: string;
  status: "DRAFT" | "PUBLISHED";
  steps: Step[];
  visits?: number;
  completions?: number;
  updatedAt: number;
}

/**
 * Cada item do caminho percorrido em uma sessão,
 * com título do passo e tempo gasto.
 */
export interface PathItem {
  id: string;
  title: string;
  enterAt: number;
  leaveAt: number;
  timeSpent: number;
}

/**
 * Sessão de execução de um Flow,
 * incluindo o array de PathItems.
 */
export interface Session {
  id: string;
  flowId: string;
  startedAt: number;
  finishedAt?: number;
  path: PathItem[];
}

/**
 * Evento de entrada/saída de um Step dentro de uma sessão.
 * Serve para cálculos detalhados de duração por passo.
 */
export interface StepEvent {
  id: string;
  sessionId: string;
  stepId: string;
  enterAt: number;
  leaveAt: number;
}

/**
 * Log de ações importantes (CRUD, erros, conflitos, etc.).
 */
export interface LogEntry {
  id: string;
  ts: number;
  actor: string;
  action: string;
  flowId?: string;
  stepId?: string;
  payload?: any;
}


________________
...tailwind.config.ts
_______________
import type { Config } from 'tailwindcss';

export default {
    darkMode: ['class'],
    content: ['./index.html', './src/**/*.{ts,tsx}'],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")]
} satisfies Config;


________________
...test-results/.last-run.json
_______________
{
  "status": "failed",
  "failedTests": []
}

________________
...tsconfig.app.json
_______________
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}


________________
...tsconfig.json
_______________
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  }
}


________________
...tsconfig.node.json
_______________
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}


________________
...vite.config.ts
_______________
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import { VitePWA } from "vite-plugin-pwa";
import { resolve } from "path";

export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: "autoUpdate",
      manifest: {
        name: "TACO – Task Companion",
        short_name: "TACO",
        start_url: ".",
        display: "standalone",
        theme_color: "#0f172a",
        icons: [
          { src: "/pwa-192.png", sizes: "192x192", type: "image/png" },
          { src: "/pwa-512.png", sizes: "512x512", type: "image/png" },
        ],
      },
    }),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, "src"),
    },
  },
});


